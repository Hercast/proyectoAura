#include <Thread.h>
#include <ThreadController.h>
#include <Wire.h>
/* Declaracion de pines*/
#define encAnlg 4
#define encButton 5
#define wireClock  7
#define wireData  6

/* Dependiendo de la cantidad de procesos se define la cantidad de tread

  1. Thread para la recoleccion de datos: En este thread de debe iniciar la comunicacion
  serial de datos con el sensor a traves del protocolo ic2, usando la libreria Wire, para ello
  se usan dos pines del arduino para enviar datos y pulso de reloj

  2. Thread para monitoreo de boton del encoder: Con este thread se va a evualar si el boton es
  precionado, luego si es precionado.

*/
Thread collectDataSensor = Thread();
Thread monitoringEnc = Thread();
Thread hilacho2 = Thread();

ThreadController controller = ThreadController();
class ButtonThread: public Thread{
public:
  // Our custom thread attributes
  int pin;
  long duration;
  long _lastButtonPushed;

  ButtonThread(int _pin, long _duration): Thread(){
    // Set our attributes on construct
    pin = _pin;
    duration = _duration;
    _lastButtonPushed = 0;

    // Thread will start disabled
    enabled = false;

    // Configure the pin as INPUT and enable pull-up
    pinMode(pin, INPUT);
    digitalWrite(pin, HIGH);
  }

  bool shouldRun(unsigned long time){
    // Override enabled on thread when pin goes LOW.
    if(digitalRead(pin) == LOW){
      enabled = true;
      _lastButtonPushed = (time ? time : millis());
    }

    // Let default method check for it.
    return Thread::shouldRun(time);
  }

  void run(){
    // Check if time elapsed since last button push
    if(millis() > _lastButtonPushed + duration){
      // It exceeded time. We should disable it.
      enabled = false;
    }
    Thread::run();
  }
};
  
void setup() {
  Wire.begin();
  Serial.begin(9600)

} 

void loop() {
  controller.run();
}
